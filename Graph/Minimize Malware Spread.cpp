// problem link --> https://leetcode.com/problems/minimize-malware-spread/

class Solution
{
public:
    vector<int> graph[305];
    map<int, int> impected;
    static bool cmp(pair<int, int> &pr1, pair<int, int> &pr2)
    {
        if (pr1.first == pr2.first)
            return pr1.second <= pr2.second;
        return pr1.first >= pr2.first;
    }
    void dfs(int node, int &size, int &cnt, vector<bool> &vis)
    {
        vis[node] = true;
        size++;
        if (impected[node] != 0)
            cnt++;
        for (auto it : graph[node])
        {
            if (!vis[it])
                dfs(it, size, cnt, vis);
        }
    }
    int minMalwareSpread(vector<vector<int>> &g, vector<int> &initial)
    {
        sort(initial.begin(), initial.end());
        int n = g.size();
        for (auto it : initial)
            impected[it]++;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (i == j)
                    continue;
                if (g[i][j] == 1)
                    graph[i].push_back(j);
            }
        }
        vector<bool> vis(n + 1, false);
        vector<pair<int, int>> vpr;

        for (auto it : initial)
        {
            int sz = 0, infected = 0;
            if (!vis[it])
            {
                dfs(it, sz, infected, vis);
                if (infected >= 2)
                    sz = 0;
                vpr.push_back({sz, it});
            }
        }
        sort(vpr.begin(), vpr.end(), cmp);

        return vpr[0].second;
    }
};